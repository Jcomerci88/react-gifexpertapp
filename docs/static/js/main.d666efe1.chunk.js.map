{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAMaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAsBA,OACI,uBAAMC,SAfW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAe,KAEfO,QAAQC,IAAI,2BAShB,UACI,uBACIC,KAAO,OACPC,MAASX,EAETY,SAxBc,SAACT,GACvBF,EAAeE,EAAEU,OAAOF,UA0BpB,uD,+BCvCCG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAGbC,EAHa,iDAGmCC,UAAUH,GAH7C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAM,SAAAC,GAAO,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,kDAAf,UACI,qBAAKC,IAAMf,EAAKgB,IAAMN,IACtB,4BAAIA,QCOFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SACtB,ECXwB,SAAEA,GAE1B,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAhBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAKGqB,EDZyBK,CAAa1B,GAAhCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAKrB,OACI,qCACI,qBAAIJ,UAAW,+CAAf,cAAgEhB,KAC/DoB,GAAW,6CACX,qBAAKJ,UAAU,YAAf,SAGCH,EAAOJ,KAAI,SAAAC,GAAG,OAEP,aADA,CACC,EAAD,aAEAA,IAAMA,GACFA,GAFEA,EAAIC,SATvB,UEbKgB,EAAe,WAExB,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAiBA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BACM6C,EAAWnB,KAAK,SAAAT,GAAQ,OAErB,aADA,CACC,EAAD,CAEGA,SAAYA,GADNA,Y,MC9B9B6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d666efe1.chunk.js","sourcesContent":["//rafc + tab\r\n//obligar a setCategories, usando proptypes ( es como en java las interfaces)\r\n\r\nimport React, {useState} from 'react'\r\nimport propTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    //que hace esto? que es la e? la entrada, que hace target.value?\r\n      // e.target se refiere elemento clickado <li>\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue (e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2 ) {\r\n            setCategories(cats => [inputValue,...cats]); //ok\r\n            setInputValue ('');\r\n        }else {\r\n            console.log('Debe informar el campo');\r\n        }\r\n        \r\n        ;\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input            \r\n                type = \"text\"\r\n                value = {inputValue}\r\n                //onChange = { (e)=> console.log(e)}\r\n                onChange = {handleInputChange}\r\n                \r\n            />\r\n            <h2>AGREGAR CATEGORIA</h2>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: propTypes.func.isRequired\r\n}","export const getGifs = async(category) => {\r\n\r\n    //peticion http\r\n    const url= `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=5Raz2RrFMPdLnpTpYxIdAneGIUItc2i3`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    //map entra al objeto ?\r\n    const gifs = data.map ( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n\r\n    \r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    //console.log(id, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__rotateInUpRight\">\r\n            <img src= {url} alt= {title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n\r\n\r\n    \r\n\r\n}\r\n","//1 - rafc tab\r\n//2 - poner el argumento category\r\n//3 - se agrega en gifexpertapp\r\n//4 - se agrega key\r\n//useEffect para que no renderize todo ante cualquier cambio\r\n\r\n//customhook, se comentan lineas de useEffect\r\n\r\n//import React, {useState, useEffect} from 'react'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n export const GifGrid = ({category}) => {\r\n    const { data:images, loading} = useFetchGifs(category);\r\n    \r\n    \r\n    //const [count, setCount ] = useState(0);\r\n    \r\n    return (\r\n        <>\r\n            <h3 className= \"animate__animated animate__rotateInDownRight\"> {category}</h3>   \r\n            {loading && <p>Cargando....</p>}\r\n             <div className=\"card-grid\">\r\n         \r\n            \r\n            { images.map(img => (\r\n                     //<li key={category } >  {category}</li>\r\n                     <GifGridItem \r\n                     key= {img.id}\r\n                     img= {img}\r\n                     {...img}\r\n                     />\r\n                     \r\n                    \r\n                    \r\n             ))   \r\n            }\r\n     \r\n            </div> */\r\n        </>\r\n    )\r\n}\r\n\r\n//<h3 >{count}</h3> \r\n         //<button onClick= { () => setCount (count + 1)}></button>","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category])\r\n\r\n\r\n\r\n\r\n    return state; // { data:[], loading: true };\r\n\r\n\r\n}","//ver .map si es para recorrer arreglos o que?\r\n//ver useState\r\n//ver push\r\n//ver handleAdd\r\nimport React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n/*   \r\n    const handleAdd = () => {\r\n        //react no renderiza, lo pone en categories pero no se ve\r\n        //categories.push('Hunter');\r\n        //console.log(categories);\r\n        //setCategories( 'Hunter'); //rompe estado, transforma string al arreglo\r\n        //setCategories([...categories, 'Hunter']); ok\r\n        //otraforma\r\n        setCategories(cats => [...cats, 'Hunter']); //ok\r\n        console.log(categories);\r\n\r\n        //<button onClick={handleAdd}>Agregar Anime</button>\r\n\r\n    }\r\n    */\r\n    return (\r\n        <>\r\n            <h2>{ `GifExpertApp` }</h2>\r\n            <AddCategory setCategories={ setCategories}/>\r\n            <hr/>\r\n            \r\n            <ol>\r\n                { categories.map( category => \r\n                     //<li key={category } >  {category}</li>\r\n                     <GifGrid \r\n                        key= {category}\r\n                        category = {category} \r\n                    />\r\n                )   \r\n                }\r\n\r\n                \r\n            </ol>\r\n        </>\r\n        \r\n    )\r\n        \r\n} \r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root') \n);\n\n//1)\n//tarea crear componente GifExpertApp\n//<h2> gif expert app</h2>\n//<hr></hr>\n\n"],"sourceRoot":""}